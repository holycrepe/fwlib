"use strict";

/**
 * @module fwlib/FwPanel
 * @exports FwPanel
 */
define("fwlib/FwPanel", [
        "fwlib/underscore",
        "fwlib/utils",
    ],
    /**
     *
     * @param {_.LoDashStatic} _
     * @param {fwlib.utils} utils
     */
    function (_,
              utils) {
        /**
         *
         * @param {fwlib.panel.PanelInfo} info The PanelInfo object generated by fwlib
         * @param {fwlib.prefs.PrefsStorage} prefs
         * @param {fwlib.prefs.UpdatePrefsCallback} onSettingsUpdated
         * @param {FwPanelElements} [elements]
         * @param {FwPanelOptions} [options]
         * @constructor
         */
        function FwPanel(info, prefs, onSettingsUpdated, elements, options) {
            var contextPath           = fw.appJsCommandsDir + "/" + info.path + "/";
            var commandPanelDirectory = info.directory + "/" + info.path + "/";
            elements                  = elements || {};
            options                   = options || {};

            _.defaults(elements, {
                text:    [],
                toggles: [],
            });

            _.defaults(options, {
                inputWidth: 220,
                labelWidth: 45,
                toggleSize: {
                    width:  35,
                    height: 22,
                },
            });
            _.defaults(options.toggleSize, {
                width:  35,
                height: 22,
            });

            /** @type {FwPanelOptions} **/
            this.options = options;
            /** @type {FlexEventResults} **/
            this.results = [];
            this.prefs            = prefs;
            this.onSettingUpdated = onSettingsUpdated;
            //alert('FwPanel: \nOnSetting Updated: ' + this.onSettingUpdated);
            var self = this;

            this.__defineGetter__("name", function () {
                return info.name;
            });
            this.__defineGetter__("path", function () {
                return info.path;
            });
            this.__defineGetter__("directory", function () {
                return info.directory;
            });
            this.__defineGetter__("scriptDirectory", function () {
                return info.directory;
            });
            this.__defineGetter__("commandPanelDirectory", function () {
                return commandPanelDirectory;
            });
            this.__defineGetter__("contextPath", function () {
                return contextPath;
            });
            this.__defineGetter__("elements", function () {
                return elements;
            });

            this.__defineGetter__("vRule", function () {
                return self.getVerticalSeparator();
            });
        }

        FwPanel.prototype.log                     = function (source, message) {
            message = message
                ? source + ": " + message
                : source;
            utils.log("FwPanel: " + this.name + ": " + message);
        };
        FwPanel.prototype.addEventResult          = function (results, result, enabled) {
            this.results.push(result);
            if (enabled !== false)
                results.push(result);
        };
        FwPanel.prototype.initializeElements      = function (inEvent, prefs) {
            if (prefs)
                this.prefs = prefs;
            var results = inEvent.result;
            //var source = "Initializing Elements";
            //this.log(source, "Start");
            //this.log(source, "Toggle Buttons");
            this.initializeToggleButtons(results);
            //this.log(source, "Text Inputs");
            this.initializeTextInputs(results);
            //this.log(source, "Complete");
            return results;
        };
        FwPanel.prototype.initializeToggleButtons = function (results, elementNames) {
            if (typeof elementNames === 'undefined')
                elementNames = this.elements.toggles;
            for (var i = 0, j = elementNames.length; i < j; i++) {
                var elementName = elementNames[i];
                var settingName = utils.toCamelCase(elementName);
                this.addEventResult(results, [
                    elementName,
                    "selected",
                    !!this.prefs[settingName],
                ], true);
            }
        };
        FwPanel.prototype.initializeTextInputs    = function (results, elementNames) {
            if (typeof elementNames === 'undefined')
                elementNames = this.elements.text;
            for (var i = 0, j = elementNames.length; i < j; i++) {
                var elementName = elementNames[i];
                var settingName = utils.toCamelCase(elementName);
                var value       = this.prefs[settingName];
                if (typeof value === "undefined")
                    continue;
                //this.log("Text Input: " + elementName + ": " + value);
                this.addEventResult(results, [
                    elementName,
                    "text",
                    value,
                ], true);
            }
        };


        // =======================================================================
        /**
         *
         * @param  inEvent
         * @param {String} settingName
         * @param {String} [elementName]
         */
        FwPanel.prototype.updatePreference = function (inEvent, elementName, settingName) {
            //alert(utils.stringify(inEvent));
            if (!elementName)
                elementName = inEvent.targetName;
            if (!settingName)
                settingName = utils.toCamelCase(elementName);
            var newPrefs          = {};
            newPrefs[settingName] = inEvent.currentValues[elementName];
            //noinspection JSCheckFunctionSignatures
            //alert("FwPanel.UpdatePreference: "
            //    + "\nthis: " + "[" + (this instanceof FwPanel) +"] " + this
            //    + "\nName: " + this.name
            //    + "\nonSettingUpdated" + this.onSettingUpdated);
            this.onSettingUpdated(newPrefs);
        };


        // =======================================================================

        FwPanel.prototype.getFormHeading = function (heading) {
            return {
                FormHeading: {
                    label: heading + ":",
                    style: {
                        fontWeight: 'bold',
                        fontSize:   12,
                    },
                },
            }
        };
// =======================================================================
        var getDefaultName               = function (title) {
            return title.replace(/[^a-z0-9]+/ig, '');
        };

// =======================================================================

        /**
         * 
         * @param options {FwPanelFormEntryToggleOptions}
         * @return {FwPanelFormToggleOptions[]}
         */
        var parseToggleOptions = function (options) {
            var toggles = options.toggles || [],
                toggle = options.toggle;
            if (!toggle && toggle !== false && !toggles) {
                toggle = true;
            }
            if (toggle === true) {
                toggle = {};
            }
            if (typeof toggle === 'object')
                toggles.push(toggle);
            return toggles;
        };

        // =======================================================================
        /**
         *
         * @param {string} title
         * @param {FwPanelFormToggleOptions|*} options
         */
        FwPanel.prototype.createToggleElement = function (title, options) {
            var self = this;
            var defaultName = getDefaultName(title);
            var action      = options.action || 'Enable';
            _.defaults(options, {
                name:        action + defaultName,
                description: action + " " + title,
                icon:        action.toLowerCase(),
            });
            var name =  options.name;
            //utils.log('FwPanel: New Toggle Element ' + name);
            this.elements.toggles.push(name);

            var toggleStyle = {};
            if (options.icon) {
                _.extend(toggleStyle, this.getButtonIcons(options.icon));
            }

            return {
                Button: {
                    name:    name,
                    toolTip: options.description,
                    width:   this.options.toggleSize.width,
                    height:  this.options.toggleSize.height,
                    toggle:  true,
                    style:   toggleStyle,
                    events:  {
                        click: function(inEvent, elementName, settingName) {
                            self.updatePreference(inEvent, elementName, settingName);
                        },
                    },
                },
            }
        };

        FwPanel.prototype.getVerticalSeparator = function() {
            return {
                VRule: {
                    width:  6,
                    height: 22,
                    style:  {
                        strokeWidth: 2,
                    },
                },
            };
        };

        // =======================================================================
        /**
         *
         * @param {string} title
         * @param {FwPanelFormTextOptions|*} [options]
         */
        FwPanel.prototype.createTextElement = function (title, options) {
            var self = this;
            options = options || {};
            var name =  options.name || getDefaultName(title);
            //utils.log('FwPanel: New Text Element ' + name);
            this.elements.text.push(name);

            return {
                TextInput: {
                    name:    name,
                    width:   this.getTextInputSize(options),
                    toolTip: options.description,
                    events:  {
                        change: function(inEvent, elementName, settingName) {
                            self.updatePreference(inEvent, elementName, settingName);
                        },
                    },
                },
            }
        };

        // =======================================================================
        /**
         *
         * @param {string} title
         * @param {FwPanelFormToggleOptions|*} options
         */
        FwPanel.prototype.getToggleFormItem = function (title, options) {
            var defaultAction = getDefaultName(title);

            _.defaults(options = options || {}, {
                action: defaultAction,
            });

            return {
                FormItem: {
                    label:    title + ":",
                    children: [
                        this.createToggleElement(options.target || title, options),
                    ],
                },
            };
        };


        // =======================================================================
        /**
         *
         * @param groups {object[][]}
         * @param [options] {FwPanelContainerOptions|*}
         * @return object[]
         */
        FwPanel.prototype.getChildrenFromGroups = function (groups, options) {
            options = options || {};
            var children=[];
            for (var i = 0, j = groups.length; i < j; i++) {
                var items = groups[i];
                if (options.includeSeparators && i > 0)
                    children.push(this.vRule);
                if (!utils.isArray(items))
                    items = [items];
                [].push.apply(children, items);
            }
            return children
        };


        // =======================================================================
        /**
         *
         * @param {object[]} group
         */
        FwPanel.prototype.getTopRow = function (group /*, ...group2*/) {
            /** @type {object[][]} **/
            var groups = [].slice.call(arguments, 0);
            var children=this.getChildrenFromGroups(groups, {
                includeSeparators: true
            });
            return {
                HBox: {
                    percentWidth: 100,
                    style:        {
                        horizontalGap: 5,
                    },
                    children:     children,
                },
            }
        };


        // =======================================================================
        /**
         *
         * @param {object[]} group
         */
        FwPanel.prototype.getFormChildren = function (group /*, ...group2*/) {
            /** @type {object[][]} **/
            var groups = [].slice.call(arguments, 0);
            return this.getChildrenFromGroups(groups);
        };

        // =======================================================================
        /**
         *
         * @param {object[]} children
         * @param {FwPanelFormEntryToggleOptions} options
         */
        FwPanel.prototype.getHorizontalContainer = function (children, options) {
            /** @type {object[]} **/
            var siblings;
            if (options) {
                siblings = options.siblings || [];
                if (options.sibling) {
                    siblings.push(options.sibling);
                }
            }
            if (!siblings) {
                return {
                    HBox: {
                        children: children,
                    }
                };
            }
            var parentContainerStyle = {
                horizontalGap: 5
            };
            var childContainerStyle                = {
                horizontalGap: 5
            };
            parentContainerStyle = childContainerStyle = {};
            return {
                HBox: {
                    //percentWidth: 100,
                    style:        parentContainerStyle,
                    children:     [
                        {
                            HBox: {
                                horizontalScrollPolicy: 'off',
                                style:                  childContainerStyle,
                                children:               children
                            }
                        },
                        {
                            HBox: {
                                horizontalScrollPolicy: 'off',
                                style:                  childContainerStyle,
                                children:               siblings
                            }
                        }
                    ]
                }
            };
        };

        // =======================================================================
        /**
         *
         * @param {string} target
         * @param optionsOrToggle
         */
        FwPanel.prototype.getToggleFormItems = function (target, optionsOrToggle /*, toggle2, toggle2 */) {
            //noinspection JSValidateTypes
            /** @type {FwPanelFormEntryToggleOptions} **/
            var options = optionsOrToggle.hasOwnProperty('toggles')
                ? optionsOrToggle
                : {
                    toggles: [].slice.call(arguments, 1)
                };

            var toggles = options.toggles;

            var children = [];
            for (var i = 0, j = toggles.length; i < j; i++) {
                var itemOptions = toggles[i];
                _.defaults(itemOptions, {
                    target: target
                });
                var title = itemOptions.title || itemOptions.name || itemOptions.action;
                var item = this.getToggleFormItem(title, itemOptions);
                children.push(item);
            }

            return this.getHorizontalContainer(children, options);
        };

        // =======================================================================
        /**
         *
         * @param {string} title
         * @param {FwPanelFormTextOptions|*} options
         */
        FwPanel.prototype.getFormTextEntry = function (title, options) {
            options = options || {};
            return this.getFormItem(title, {
                text: options,
            });
        };

        // =======================================================================
        /**
         *
         * @param {string} title
         * @param {FwPanelFormEntryOptions|*} options
         */
        FwPanel.prototype.getFormToggleEntry = function (title, options) {
            options = options || {};
            if (!options.toggles && !options.toggle) {
                //noinspection JSUndefinedPropertyAssignment
                options.toggles = [{}];
            }
            return this.getFormItem(title, options);
        };

        // =======================================================================
        /**
         *
         * @param {string} title
         * @param {FwPanelFormEntryOptions|*} options
         */
        FwPanel.prototype.getFormItem = function (title, options) {
            options = options || {};
            _.defaults(options = options || {}, {
                text: {},
            });
            var toggles = parseToggleOptions(options);
            var totalToggles = toggles.length;
            var children     = [];

            for (var i = 0; i < totalToggles; i++) {
                //noinspection JSDuplicatedDeclaration
                var itemOptions = toggles[i];
                //noinspection JSDuplicatedDeclaration
                var item        = this.createToggleElement(itemOptions.title || title, itemOptions);
                children.push(item);
            }

            {
                //noinspection JSDuplicatedDeclaration
                var itemOptions = options.text;

                _.defaults(itemOptions, {
                    numLabels: totalToggles,
                });

                //noinspection JSDuplicatedDeclaration
                var item = this.createTextElement(itemOptions.title || title, itemOptions);
                children.push(item);
            }

            return this.getHorizontalContainer(children, options);
        };

        // =======================================================================
        FwPanel.prototype.getButtonIcons = function (buttonName) {
            var self    = this;
            var prefix  = this.path + "/Icons/" + buttonName + "-icon",
                missing = false;

            function getButtonIconPath(buttonType) {
                return prefix + (buttonType
                    ? "-" + buttonType
                    : "") + ".png";
            }

            function getButtonIcon() {
                /** @type {string[]} **/
                var buttonTypes = [].slice.call(arguments, 0),
                    path;
                buttonTypes.push('');
                for (var i = 0, j = buttonTypes.length; i < j; i++) {
                    var buttonType = buttonTypes[i];
                    path           = getButtonIconPath(buttonType);
                    var fullPath   = self.directory + path;
                    if (Files.exists(fullPath)) {
                        return path;
                    }
                    missing = true;
                    //self.log('Button Icon: ' + buttonName + ' → ' + buttonType + ' @ ' + fullPath + ' not found');
                }
                return path;
            }

            var buttons = {
                normal:   getButtonIcon(),
                hover:    getButtonIcon('hover', 'active'),
                active:   getButtonIcon('active', 'hover'),
                disabled: getButtonIcon('disabled'),
            };
            //if (missing)
            //    self.log('Button Icons: ' + buttonName + ' \u2192 \n' + utils.stringify(buttons));
            return {
                icon:                 buttons.normal,
                overIcon:             buttons.hover,
                downIcon:             buttons.active,
                selectedDownIcon:     buttons.active,
                selectedUpIcon:       buttons.active,
                selectedOverIcon:     buttons.hover,
                selectedDisabledIcon: buttons.disabled,
                disabledIcon:         buttons.disabled,
            }
        };

        FwPanel.prototype.getButtonIcon = function (buttonName) {
            var icons = this.getButtonIcons(buttonName);
            return icons.icon;
        };

        /**
         *
         * @param [options] {FwPanelFormTextOptions
         * @return {number}
         */
        FwPanel.prototype.getTextInputSize = function (options) {
            /** @type {FwPanelFormTextOptions} **/
            options = options || {};
            _.defaults(options, {
                numLabels: 1,
                percentWidth: 100
            });

            var width = this.options.inputWidth;
            if (options.percentWidth)
                width *= options.percentWidth / 100;
            var numLabels = options.numLabels - 1;
            width -= numLabels * (this.options.labelWidth * 0.95);
            if (options.widthOffset)
                width += options.widthOffset;
            return width;
        };

        return FwPanel;
    });
